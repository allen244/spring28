Spring 28min

spring mvc
-create project in spring io
-add maven project with all the dependencies

To create a mapping-
-create a controller- add annotations @Getmapping @controller
-create a method return String to the file spring should look for.
-to jsut return a value you can add 

This is a GETMAPPING
   @GetMapping("/login")
    @ResponseBody
    public String sayHello() {
        return "Hello World dummy";
    }
	
ViewResolver- tells spring boot what view to use.
-thymeleaf- need to add the jars and the schema in html
-jsp need to set the path webapp/web-inf/jsp

you can either add a bean pointing the view or application.props
spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp


@PathVariable-  @RequestMapping("/{id}/delete-todo")
Map request paramter-?name=test --   @RequestParam String name 
    @GetMapping("/login")
    public String loginMessage(Model model, @RequestParam String name ){

        System.out.println(name);
        return "login";
    }
	
add model to the view -  model.addAttribute("name", name);

DispatcherServlet-
DispatcherServlet receives HTTP Request.
DispatcherServlet identifies the right Controller based on the URL.
Controller executes Business Logic.
Controller returns a) Model b) View Name Back to DispatcherServlet.
DispatcherServlet identifies the correct view (ViewResolver).
DispatcherServlet makes the model available to view and executes it.
DispatcherServlet returns HTTP Response Back.
Flow : http://docs.spring.io/spring-framework/docs/2.0.8/reference/images/mvc.png


FrontController Architexture
-browser to frontcontroller to controller1 or controller 2 to model to view

Session objects- need to add annotations across controllers
@SessionAttributes("name")

JSTL- Add jar dependency and inculde the core c lib at the top of the jsp pages
https://www.journaldev.com/2090/jstl-tutorial-jstl-tags-example

Spring form validation
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

Webjars- it puts the js and css in a jar file instead of placing it in a folder

Command Bean/Object-
need to add this for jsp <%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

Validation- add annotations to the domain object or command object
-can use bindingResult or add @valid annontation
BindingResult bindingResult
if (bindingResult.hasErrors()) {

	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, false));
	}

Spring security
    @Autowired
    public void configureGlobalSecurity(AuthenticationManagerBuilder auth)
            throws Exception {
        auth.inMemoryAuthentication().withUser("test").password("test")
                .roles("USER", "ADMIN");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().antMatchers("/login").permitAll()
                .antMatchers("/", "/*todo*/**").access("hasRole('USER')").and()
                .formLogin();
    }
	
	get user
	    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if (principal instanceof UserDetails) {
            return ((UserDetails) principal).getUsername();
        }
		
		logout
		    @GetMapping("/logout")
    public String logout(HttpServletRequest request,
                         HttpServletResponse response) {

        Authentication authentication = SecurityContextHolder.getContext()
                .getAuthentication();

        if (authentication != null) {
            new SecurityContextLogoutHandler().logout(request, response,
                    authentication);
        }

        return "redirect:/";
    }
	
Exception Handling

@ComponentScan- scan for dependecies in differnt packages outside of the spring application

Spring Boot vs Spring
Spring
Spring is just a dependency injection framework. Spring focuses on the "plumbing" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.
First half of the 2000 decade! EJBs
EJBs were NOT easy to develop.
Write a lot of xml and plumbing code to get EJBs running
Impossible to Unit Test
Alternative - Writing simple JDBC Code involved a lot of plumbing
Spring framework started with aim of making Java EE development simpler.
Goals
Make applications testable. i.e. easier to write unit tests
Reduce plumbing code of JDBC and JMS
Simple architecture. Minus EJB.
Integrates well with other popular frameworks.

Applications with Spring Framework
Over the next few years, a number of applications were developed with Spring Framework
Testable but
Lot of configuration (XML and Java)
Developing Spring Based application need configuration of a lot of beans!
Integration with other frameworks need configuration as well!
In the last few years, focus is moving from monolith applications to microservices. We need to be able to start project quickly. Minimum or Zero start up time

Framework Setup
Deployment - Configurability
Logging, Transaction Management
Monitoring
Web Server Configuration

Spring Boot- provides a wrapper so that you can integrate very easily with compontest hibernate,jms jdbc

Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.
We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss.

Example Problem Statements
You want to add Hibernate to your project. You dont worry about configuring a data source and a session factory. I will do if for you!

Goals
Provide quick start for projects with Spring.
Be opinionated but provide options.
Provide a range of non-functional features that are common to large classes of projects (e.g. embedded servers, security, metrics, health checks, externalized configuration).

What Spring Boot is NOT?
It’s not an app or a web server
Does not implement any specific framework - for example, JPA or JMS
Does not generate code

Create Rest Api-
Create @RestController
Create domain object
create service

Jackson message converters will cover the domain object to json

Different Request Methods
GET - Retrieve details of a resource
POST - Create a new resource
PUT	- Update an existing resource
PATCH - Update part of a resource
DELETE - Delete a resource

What is REST?
Architectural style for the web. REST specifies a set of constraints.
Client - Server : Server (service provider) should be different from a client (service consumer).
Enables loose coupling and independent evolution of server and client as new technologies emerge.
Each service should be stateless.
Each Resource has a resource identifier.
It should be possible to cache response.
Consumer of the service may not have a direct connection to the Service Provider. Response might be sent from a middle layer cache.
A resource can have multiple representations. Resource can modified through a message in any of the these representations.

DEV TOOLS

I hate the fact that I've to stop and start the server each time. Can somebody save me?
Yeah. Spring Boot Developer Tools
By default, any entry on the classpath that points to a folder will be monitored for changes.
These will not trigger restart - /META-INF/maven, /META-INF/resources ,/resources ,/static ,/public or /templates
Folders can be configured : spring.devtools.restart.exclude=static/,public/
Additional Paths : spring.devtools.restart.additional-paths
LiveReload http://livereload.com/extensions/
Technology in progress!! So, expect a few problems!
Programming Tip
Become an expert at your IDE - https://www.youtube.com/watch?v=dN9GYsG1v_c


Spring Boot Actuator
/env, /metrics, /trace, /dump, /shutdown, /beans, / autoconfig, /configprops, /mappings
HAL Browser
http://localhost:8080/actuator/
Execute individual REST Services for each of above
Programming Tip
Use static code analysis - https://www.youtube.com/watch?v=rB_BaftN3nE

Embedded servlet containers
Default Tomcat
We did not install Tomcat. Did we? Magic is done by Spring Boot!
Switching to Jetty or Undertow
Configuration
server.port
Programming Tip
Always review code : https://www.youtube.com/watch?v=hVJGu0xdXII

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>

Spring Configuration options
-Can use @Value from a property file

HIGHEST VALUE IN ORDER
-environment variables
-Program argument when start the application -  --welcome.message="Welcome program ARGUMENTS"
 -@Value("${welcome.message}")
    private String welcome;
-PROFILES


Profile- 

Understand Basics of Profiles
Setting a profile
Using -Dspring.profiles.active=prod in VM Arguments
spring.profiles.active=prod
Using a profile
application-{profile-name}.properties
@Profile("dev") on a bean
Usage
Configure Resources - Databases, Queues, External Services

-spring.profiles.active=prod in application.properties
spring will pick up the profile 
application-prod.properties

configure a bunch of props to use
@Component
@ConfigurationProperties("Basic")
public class BasicConfiguration {


Spring data jpa
-create @Entity or domain object with mappings and primary keys
-create repository inteface
public interface UserRepository extends CrudRepository<User, Long> {

Look at H2 Console : http://localhost:8080/h2-console
Use db url jdbc:h2:mem:testdb
Add findByRole method

   <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
		
-set up rest repostiory

http://localhost:8080/users/search/findByRole?role=Admin
http://localhost:8080/users?sort=name,asc
http://localhost:8080/users/?size=1

@RepositoryRestResource(collectionResourceRel = "users", path = "users")
public interface UserRestRepository extends
        PagingAndSortingRepository<User, Long> {
    List<User> findByRole(@Param("role") String role);
	
	
}
Introduction to Spring Data Rest
Hit http://localhost:8080/users in POSTMAN
http://localhost:8080/users/1
http://localhost:8080/users/?size=4
http://localhost:8080/users/?sort=name,desc
@Param("role")
http://localhost:8080/users/search/findByRole?role=Admin
Good for quick prototype! Be cautious about using this in Big applications!


Testing TDD-
-Integration test- test all the units together
-unit test test one specific part of the application

configure test annotations
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Springboot28Application.class,
        webEnvironment = SpringBootTest.WebEnvironment.RA
		
		TestRestTemplate- template used to invoke urls
		
		
Understand Design Patterns
https://www.youtube.com/watch?v=Vp7q_pE7Fzg
Understand Modern Development Practices
https://www.youtube.com/watch?v=0Kqzfyp-w4s





Jpda- alot of query writing

Spring jpda provided and entity manager